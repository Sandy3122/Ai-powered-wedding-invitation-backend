const admin = require('firebase-admin');
const path = require('path');
const serviceAccount = require('./serviceAccountKey.json');
console.log(serviceAccount);
require('dotenv').config();

async function testFirebaseWorking() {
  try {
    console.log('🧪 Testing Firebase connection...');
    
    // Load service account
    
    // Initialize Firebase app if it's not already initialized
    // The Admin SDK automatically derives projectId and database from the service account key,
    // but the storage bucket often needs to be specified explicitly.
    if (!admin.apps.length) {
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        storageBucket: process.env.STORAGE_BUCKET, // Explicitly provide the storage bucket
      });
    }
    
    const bucket = admin.storage().bucket();
    const db = admin.firestore();
    
    console.log('✅ Firebase initialized successfully');
    console.log('📊 Project ID:', admin.instance.options.projectId);
    console.log('🗄️ Storage Bucket:', bucket.name);
    
    // NOTE: Firestore does not have a "database URL" like the Realtime Database.
    // The connection is handled automatically by the SDK using the service account credentials.
    
    // Test creating a document in wishes collection
    console.log('📝 Creating test wish document...');
    const wishRef = db.collection('wishes').doc('test-' + Date.now());
    await wishRef.set({
      name: 'Test User',
      relation: 'Friend',
      email: 'test@example.com',
      originalWish: 'This is a test wish to verify Firebase connection',
      enhancedWish: 'This is a test wish to verify Firebase connection',
      tone: 'heartfelt',
      artworkStyle: 'cartoon',
      language: 'en-IN',
      likes: 0,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      isApproved: true
    });
    
    console.log('✅ Wish document created successfully');
    console.log('📊 Document ID:', wishRef.id);
    
    // Test reading the document
    console.log('📖 Reading test document...');
    const doc = await wishRef.get();
    if (doc.exists) {
      console.log('✅ Document read successfully');
      console.log('📄 Document data:', doc.data());
    }
    
    // Test creating a document in media collection
    console.log('📝 Creating test media document...');
    const mediaRef = db.collection('media').doc('test-media-' + Date.now());
    await mediaRef.set({
      id: 'test-media-' + Date.now(),
      type: 'photo',
      url: 'https://via.placeholder.com/800x600',
      thumbnail: 'https://via.placeholder.com/300x300',
      title: 'Test Wedding Photo',
      date: new Date().toISOString(),
      likes: 0,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      originalName: 'test.jpg',
      fileSize: 1024000,
      mimeType: 'image/jpeg'
    });
    
    console.log('✅ Media document created successfully');
    console.log('📊 Document ID:', mediaRef.id);
    
    // Clean up test documents
    console.log('🧹 Cleaning up test documents...');
    await wishRef.delete();
    await mediaRef.delete();
    console.log('✅ Test documents deleted');
    
    console.log('\n🎉 Firebase connection is working perfectly!');
    console.log('🚀 You can now start the server with: npm start');
    
    process.exit(0);
    
  } catch (error) {
    console.error('❌ Firebase test failed:', error.message);
    console.error('Error code:', error.code);
    
    if (error.code === 'storage/invalid-argument') {
      console.error('\n🔧 FIREBASE STORAGE NOT FIXED:');
      console.error('Ensure that you have set the STORAGE_BUCKET environment variable in your .env file with a valid bucket name.');
    } else if (error.code === 5) {
      console.error('\n🔧 FIREBASE STILL NOT FIXED:');
      console.error('Please follow these steps:');
      console.error('1. Go to Firebase Console → Project Settings → Service Accounts');
      console.error('2. Generate a new private key');
      console.error('3. Replace serviceAccountKey.json with the new key');
      console.error('4. Go to Google Cloud Console → APIs & Services → Library');
      console.error('5. Enable "Cloud Firestore API"');
      console.error('6. Go to IAM & Admin → IAM');
      console.error('7. Add these roles to your service account:');
      console.error('   - Firebase Admin SDK Administrator Service Agent');
      console.error('   - Cloud Datastore User');
      console.error('   - Firebase Admin');
    }
    
    process.exit(1);
  }
}

testFirebaseWorking();
